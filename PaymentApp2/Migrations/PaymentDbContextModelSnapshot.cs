// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentApp.Data;

#nullable disable

namespace PaymentApp2.Migrations
{
    [DbContext(typeof(PaymentDbContext))]
    partial class PaymentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("PaymentApp.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecurrenceType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1200.00m,
                            DueDate = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            IsRecurring = true,
                            Name = "Rent",
                            Notes = "Monthly rent payment",
                            RecurrenceType = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 85.50m,
                            DueDate = new DateTime(2025, 8, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            IsRecurring = true,
                            Name = "Electric Bill",
                            Notes = "Utility bill - account #12345",
                            RecurrenceType = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 15.99m,
                            DueDate = new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            IsRecurring = true,
                            Name = "Netflix Subscription",
                            Notes = "Premium plan",
                            PaidDate = new DateTime(2025, 8, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            RecurrenceType = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 450.00m,
                            DueDate = new DateTime(2025, 8, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            IsRecurring = false,
                            Name = "Car Insurance",
                            Notes = "Quarterly payment - due soon!",
                            RecurrenceType = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Amount = 65.00m,
                            DueDate = new DateTime(2025, 8, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            IsRecurring = true,
                            Name = "Phone Bill",
                            Notes = "Verizon - unlimited plan",
                            RecurrenceType = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("PaymentApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john@example.com",
                            UserName = "john_doe"
                        });
                });

            modelBuilder.Entity("PaymentApp.Models.Payment", b =>
                {
                    b.HasOne("PaymentApp.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaymentApp.Models.User", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
